{"version":3,"sources":["../src/Progress.js"],"names":["Progress","easing","props","value","nextProps","progress","progressColor","sx","x","sy","y","px","py","prog"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,Q;;;;;;;;;;;;;;0LACnBC,M,GAAS,2DAAgB,MAAKC,KAAL,CAAWC,KAA3B,E;;;;;0CAEaC,S,EAAW;AAC/B,oIAAgCA,SAAhC,GAA4C,OAAO,IAAP;AADb,mBAEY,KAAKF,KAFjB;AAAA,UAEvBC,KAFuB,UAEvBA,KAFuB;AAAA,UAEhBE,QAFgB,UAEhBA,QAFgB;AAAA,UAENC,aAFM,UAENA,aAFM;;AAG/B,aACEF,UAAUC,QAAV,KAAuBA,QAAvB,IACAD,UAAUE,aAAV,KAA4BA,aAD5B,IAEAF,UAAUD,KAAV,KAAoBA,KAHtB;AAKD;;;wCAEmBD,K,EAAO;AACzB,UAAI,KAAKA,KAAL,CAAWC,KAAX,KAAqBD,MAAMC,KAA/B,EAAsC;AACpC,aAAKF,MAAL,GAAc,2DAAgBC,MAAMC,KAAtB,EAAd;AACD;AACF;;;6BAEQ;AAAA,oBAC6B,KAAKD,KADlC;AAAA,UACCG,QADD,WACCA,QADD;AAAA,UACWC,aADX,WACWA,aADX;;AAEP,UAAI,CAACD,QAAL,EAAe,OAAO,2CAAP;AACf,UAAME,KAAK,KAAKC,CAAL,CAAO,CAAP,CAAX;AACA,UAAMC,KAAK,KAAKC,CAAL,CAAO,CAAP,CAAX;AACA,UAAMC,KAAK,KAAKH,CAAL,CAAOH,QAAP,CAAX;AACA,UAAMO,KAAK,KAAKF,CAAL,CAAO,KAAKT,MAAL,GAAc,KAAKA,MAAL,CAAYI,QAAZ,CAAd,GAAsC,CAA7C,CAAX;AACA,UAAMQ,aAAWF,EAAX,SAAiBF,EAAjB,UAAwBE,EAAxB,SAA8BC,EAA9B,UAAqCL,EAArC,SAA2CK,EAAjD;AACA,aACE,wCAAM,MAAK,MAAX,EAAkB,aAAY,KAA9B,EAAoC,QAAQN,aAA5C,EAA2D,GAAGO,IAA9D,GADF;AAGD;;;;;;kBA9BkBb,Q","file":"Progress.js","sourcesContent":["import React from \"react\";\nimport BezierEasing from \"bezier-easing\";\nimport BezierComponent from \"./BezierComponent\";\n\nexport default class Progress extends BezierComponent {\n  easing = BezierEasing(...this.props.value);\n\n  shouldComponentUpdate(nextProps) {\n    if (super.shouldComponentUpdate(nextProps)) return true;\n    const { value, progress, progressColor } = this.props;\n    return (\n      nextProps.progress !== progress ||\n      nextProps.progressColor !== progressColor ||\n      nextProps.value !== value\n    );\n  }\n\n  componentWillUpdate(props) {\n    if (this.props.value !== props.value) {\n      this.easing = BezierEasing(...props.value);\n    }\n  }\n\n  render() {\n    const { progress, progressColor } = this.props;\n    if (!progress) return <path />;\n    const sx = this.x(0);\n    const sy = this.y(0);\n    const px = this.x(progress);\n    const py = this.y(this.easing ? this.easing(progress) : 0);\n    const prog = `M${px},${sy} L${px},${py} L${sx},${py}`;\n    return (\n      <path fill=\"none\" strokeWidth=\"1px\" stroke={progressColor} d={prog} />\n    );\n  }\n}\n"]}